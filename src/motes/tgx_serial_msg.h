/**
 * This file is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This file defines the layout of the 'sensor_msg' message type.
 */

#ifndef SENSOR_MSG_H
#define SENSOR_MSG_H
#include <message.h>

enum {
  /** The default size of this message type in bytes. */
  SENSOR_MSG_SIZE = 24,

  /** The Active Message type associated with this message. */
  SENSOR_MSG_AM_TYPE = 43,

  /* Field nodeId: type uint16_t, offset (bits) 0, size (bits) 16 */
  /** Offset (in bytes) of the field 'nodeId' */
  SENSOR_MSG_NODEID_OFFSET = 0,
  /** Offset (in bits) of the field 'nodeId' */
  SENSOR_MSG_NODEID_OFFSETBITS = 0,
  /** Size (in bytes) of the field 'nodeId' */
  SENSOR_MSG_NODEID_SIZE = 2,
  /** Size (in bits) of the field 'nodeId' */
  SENSOR_MSG_NODEID_SIZEBITS = 16,

  /* Field parentId: type uint16_t, offset (bits) 16, size (bits) 16 */
  /** Offset (in bytes) of the field 'parentId' */
  SENSOR_MSG_PARENTID_OFFSET = 2,
  /** Offset (in bits) of the field 'parentId' */
  SENSOR_MSG_PARENTID_OFFSETBITS = 16,
  /** Size (in bytes) of the field 'parentId' */
  SENSOR_MSG_PARENTID_SIZE = 2,
  /** Size (in bits) of the field 'parentId' */
  SENSOR_MSG_PARENTID_SIZEBITS = 16,

  /* Field position.x: type uint16_t, offset (bits) 32, size (bits) 16 */
  /** Offset (in bytes) of the field 'position.x' */
  SENSOR_MSG_POSITION_X_OFFSET = 4,
  /** Offset (in bits) of the field 'position.x' */
  SENSOR_MSG_POSITION_X_OFFSETBITS = 32,
  /** Size (in bytes) of the field 'position.x' */
  SENSOR_MSG_POSITION_X_SIZE = 2,
  /** Size (in bits) of the field 'position.x' */
  SENSOR_MSG_POSITION_X_SIZEBITS = 16,

  /* Field position.y: type uint16_t, offset (bits) 48, size (bits) 16 */
  /** Offset (in bytes) of the field 'position.y' */
  SENSOR_MSG_POSITION_Y_OFFSET = 6,
  /** Offset (in bits) of the field 'position.y' */
  SENSOR_MSG_POSITION_Y_OFFSETBITS = 48,
  /** Size (in bytes) of the field 'position.y' */
  SENSOR_MSG_POSITION_Y_SIZE = 2,
  /** Size (in bits) of the field 'position.y' */
  SENSOR_MSG_POSITION_Y_SIZEBITS = 16,

  /* Field sensor.temp: type uint16_t, offset (bits) 64, size (bits) 16 */
  /** Offset (in bytes) of the field 'sensor.temp' */
  SENSOR_MSG_SENSOR_TEMP_OFFSET = 8,
  /** Offset (in bits) of the field 'sensor.temp' */
  SENSOR_MSG_SENSOR_TEMP_OFFSETBITS = 64,
  /** Size (in bytes) of the field 'sensor.temp' */
  SENSOR_MSG_SENSOR_TEMP_SIZE = 2,
  /** Size (in bits) of the field 'sensor.temp' */
  SENSOR_MSG_SENSOR_TEMP_SIZEBITS = 16,

  /* Field sensor.photo: type uint16_t, offset (bits) 80, size (bits) 16 */
  /** Offset (in bytes) of the field 'sensor.photo' */
  SENSOR_MSG_SENSOR_PHOTO_OFFSET = 10,
  /** Offset (in bits) of the field 'sensor.photo' */
  SENSOR_MSG_SENSOR_PHOTO_OFFSETBITS = 80,
  /** Size (in bytes) of the field 'sensor.photo' */
  SENSOR_MSG_SENSOR_PHOTO_SIZE = 2,
  /** Size (in bits) of the field 'sensor.photo' */
  SENSOR_MSG_SENSOR_PHOTO_SIZEBITS = 16,

  /* Field sensor.sound: type uint16_t, offset (bits) 96, size (bits) 16 */
  /** Offset (in bytes) of the field 'sensor.sound' */
  SENSOR_MSG_SENSOR_SOUND_OFFSET = 12,
  /** Offset (in bits) of the field 'sensor.sound' */
  SENSOR_MSG_SENSOR_SOUND_OFFSETBITS = 96,
  /** Size (in bytes) of the field 'sensor.sound' */
  SENSOR_MSG_SENSOR_SOUND_SIZE = 2,
  /** Size (in bits) of the field 'sensor.sound' */
  SENSOR_MSG_SENSOR_SOUND_SIZEBITS = 16,

  /* Field sensor.x_acc: type uint16_t, offset (bits) 112, size (bits) 16 */
  /** Offset (in bytes) of the field 'sensor.x_acc' */
  SENSOR_MSG_SENSOR_X_ACC_OFFSET = 14,
  /** Offset (in bits) of the field 'sensor.x_acc' */
  SENSOR_MSG_SENSOR_X_ACC_OFFSETBITS = 112,
  /** Size (in bytes) of the field 'sensor.x_acc' */
  SENSOR_MSG_SENSOR_X_ACC_SIZE = 2,
  /** Size (in bits) of the field 'sensor.x_acc' */
  SENSOR_MSG_SENSOR_X_ACC_SIZEBITS = 16,

  /* Field sensor.y_acc: type uint16_t, offset (bits) 128, size (bits) 16 */
  /** Offset (in bytes) of the field 'sensor.y_acc' */
  SENSOR_MSG_SENSOR_Y_ACC_OFFSET = 16,
  /** Offset (in bits) of the field 'sensor.y_acc' */
  SENSOR_MSG_SENSOR_Y_ACC_OFFSETBITS = 128,
  /** Size (in bytes) of the field 'sensor.y_acc' */
  SENSOR_MSG_SENSOR_Y_ACC_SIZE = 2,
  /** Size (in bits) of the field 'sensor.y_acc' */
  SENSOR_MSG_SENSOR_Y_ACC_SIZEBITS = 16,

  /* Field sensor.x_mag: type uint16_t, offset (bits) 144, size (bits) 16 */
  /** Offset (in bytes) of the field 'sensor.x_mag' */
  SENSOR_MSG_SENSOR_X_MAG_OFFSET = 18,
  /** Offset (in bits) of the field 'sensor.x_mag' */
  SENSOR_MSG_SENSOR_X_MAG_OFFSETBITS = 144,
  /** Size (in bytes) of the field 'sensor.x_mag' */
  SENSOR_MSG_SENSOR_X_MAG_SIZE = 2,
  /** Size (in bits) of the field 'sensor.x_mag' */
  SENSOR_MSG_SENSOR_X_MAG_SIZEBITS = 16,

  /* Field sensor.y_mag: type uint16_t, offset (bits) 160, size (bits) 16 */
  /** Offset (in bytes) of the field 'sensor.y_mag' */
  SENSOR_MSG_SENSOR_Y_MAG_OFFSET = 20,
  /** Offset (in bits) of the field 'sensor.y_mag' */
  SENSOR_MSG_SENSOR_Y_MAG_OFFSETBITS = 160,
  /** Size (in bytes) of the field 'sensor.y_mag' */
  SENSOR_MSG_SENSOR_Y_MAG_SIZE = 2,
  /** Size (in bits) of the field 'sensor.y_mag' */
  SENSOR_MSG_SENSOR_Y_MAG_SIZEBITS = 16,

  /* Field crc: type uint16_t, offset (bits) 176, size (bits) 16 */
  /** Offset (in bytes) of the field 'crc' */
  SENSOR_MSG_CRC_OFFSET = 22,
  /** Offset (in bits) of the field 'crc' */
  SENSOR_MSG_CRC_OFFSETBITS = 176,
  /** Size (in bytes) of the field 'crc' */
  SENSOR_MSG_CRC_SIZE = 2,
  /** Size (in bits) of the field 'crc' */
  SENSOR_MSG_CRC_SIZEBITS = 16,
};

/**
 * Return the value of the field 'nodeId'
 */
uint16_t sensor_msg_nodeId_get(tmsg_t *msg);

/**
 * Set the value of the field 'nodeId'
 */
void sensor_msg_nodeId_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'parentId'
 */
uint16_t sensor_msg_parentId_get(tmsg_t *msg);

/**
 * Set the value of the field 'parentId'
 */
void sensor_msg_parentId_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'position.x'
 */
uint16_t sensor_msg_position_x_get(tmsg_t *msg);

/**
 * Set the value of the field 'position.x'
 */
void sensor_msg_position_x_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'position.y'
 */
uint16_t sensor_msg_position_y_get(tmsg_t *msg);

/**
 * Set the value of the field 'position.y'
 */
void sensor_msg_position_y_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'sensor.temp'
 */
uint16_t sensor_msg_sensor_temp_get(tmsg_t *msg);

/**
 * Set the value of the field 'sensor.temp'
 */
void sensor_msg_sensor_temp_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'sensor.photo'
 */
uint16_t sensor_msg_sensor_photo_get(tmsg_t *msg);

/**
 * Set the value of the field 'sensor.photo'
 */
void sensor_msg_sensor_photo_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'sensor.sound'
 */
uint16_t sensor_msg_sensor_sound_get(tmsg_t *msg);

/**
 * Set the value of the field 'sensor.sound'
 */
void sensor_msg_sensor_sound_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'sensor.x_acc'
 */
uint16_t sensor_msg_sensor_x_acc_get(tmsg_t *msg);

/**
 * Set the value of the field 'sensor.x_acc'
 */
void sensor_msg_sensor_x_acc_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'sensor.y_acc'
 */
uint16_t sensor_msg_sensor_y_acc_get(tmsg_t *msg);

/**
 * Set the value of the field 'sensor.y_acc'
 */
void sensor_msg_sensor_y_acc_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'sensor.x_mag'
 */
uint16_t sensor_msg_sensor_x_mag_get(tmsg_t *msg);

/**
 * Set the value of the field 'sensor.x_mag'
 */
void sensor_msg_sensor_x_mag_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'sensor.y_mag'
 */
uint16_t sensor_msg_sensor_y_mag_get(tmsg_t *msg);

/**
 * Set the value of the field 'sensor.y_mag'
 */
void sensor_msg_sensor_y_mag_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'crc'
 */
uint16_t sensor_msg_crc_get(tmsg_t *msg);

/**
 * Set the value of the field 'crc'
 */
void sensor_msg_crc_set(tmsg_t *msg, uint16_t value);

#endif
